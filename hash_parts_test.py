import base64
import crc32c  # note this is a 3d party module
import hashlib
import zlib

# test date to hash
data = "Hello, World!"

# read string s in chunks of up to n characters
def chunks(s, n):
    lst = list(s)
    for i in range(0, len(lst), n):
        yield lst[i:i+n]

# hash b using MD5 and return the digest
def as_md5(b):
    h = hashlib.md5()
    h.update(b)
    return h.digest()

# hash b using CRC32 (IEEE 802.3) and return the digest
def as_crc32(b):
    x = zlib.crc32(b, 0)
    return x.to_bytes(length=(x.bit_length() + 7) // 8, byteorder='big')

# hash b using CRC32C (Castagnoli) and return the digest
def as_crc32c(b):
    x = crc32c.crc32c(b)
    return x.to_bytes(length=(x.bit_length() + 7) // 8, byteorder='big')

# hash b using SHA1 and return the digest
def as_sha1(b):
    h = hashlib.sha1()
    h.update(b)
    return h.digest()

# hash b using SHA256 and return the digest
def as_sha256(b):
    h = hashlib.sha256()
    h.update(b)
    return h.digest()

# list of algorithms to produce test data for
algos = {
    'MD5': as_md5,
    'CRC32': as_crc32,
    'CRC32C': as_crc32c,
    'SHA1': as_sha1,
    'SHA256': as_sha256,
}

# for each algos entry print out a test suite for TestNewHashParts in
# hash_parts_test.go
print('// test date generated by hash_parts_test.py')
print('var testHashPartsExpected = []struct {')
print('\tName   string')
print('\tID     *ChecksumAlgorithm')
print('\tData   string')
print('\tBase64 map[int][]string')
print('}{')
for k, fn in algos.items():
    print('\t{')
    print(f'\t\tName: "ChecksumAlgorithm{k}",')
    print(f'\t\tID:   ChecksumAlgorithm{k},')
    print(f'\t\tData: "{data}",')
    print(f'\t\tBase64: map[int][]string{{')

    for i in range(1, 14, 1):
        print(f'\t\t\t{i}: []string{{')
        for chunk in chunks(data, i):
            b = "".join(chunk).encode('utf-8')
            h = base64.b64encode(fn(b)).decode("utf-8")
            print(f'\t\t\t\t"{h}", // {b.decode("utf-8").replace(" ", "<space>")}')
        print('\t\t\t},')

    print('\t\t},')
    print('\t},')
print('}')
