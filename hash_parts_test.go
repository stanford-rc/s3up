package main

/*
 * NOTE: The testHashP:artsExpected data at the end of this script was generated
 * via the python script hash_parts_test.py
 */

import (
	"bytes"
	"encoding/base64"
	"fmt"
	"testing"
)

func TestNewHashParts(t *testing.T) {
	for i := 0; i < len(testHashPartsExpected); i++ {
		tx := testHashPartsExpected[i]

		for partSize, b64 := range tx.Base64 {
			hp := NewHashParts(tx.ID, int64(partSize))

			hp.Write([]byte(tx.Data))

			// check that we produced the expected number of parts
			if len(b64) != len(hp.h) {
				t.Errorf("%s failed, expected %d parts, got %d",
					tx.Name, len(b64), len(hp.h))
			}

			// check that each part produces the same hash
			for j := 0; j < len(b64); j++ {
				partID := int32(j + 1)
				hash := hp.Sum(partID)

				expect := b64[j]
				actual := hash.Base64()

				if expect != actual {
					t.Errorf("%s failed, expected base64 %s, got %s",
						tx.Name, expect, actual)
				}
			}

			// calculate the hash-of-hashes / sum-of-sums used to
			// validate the overall upload for AWS S3 multi-part
			// objects
			buf := &bytes.Buffer{}
			for j := 0; j < len(b64); j++ {
				b, err := base64.StdEncoding.DecodeString(b64[j])
				if err != nil {
					err = fmt.Errorf("error processing hex[%d] for %s: %w",
						j, tx.Name, err)
					t.Fatal(err)
				}
				buf.Write(b)
			}

			h := hp.hasher()
			h.Write(buf.Bytes())

			expect := base64.StdEncoding.EncodeToString(h.Sum(nil))
			actual := hp.SumOfSums().Base64()
			if expect != actual {
				t.Errorf("%s failed, expected sum-of-sums %s, got %s",
					tx.Name, expect, actual)
			}
		}
	}
}

// test date generated by hash_parts_test.py
var testHashPartsExpected = []struct {
	Name   string
	ID     *ChecksumAlgorithm
	Data   string
	Base64 map[int][]string
}{
	{
		Name: "ChecksumAlgorithmMD5",
		ID:   ChecksumAlgorithmMD5,
		Data: "Hello, World!",
		Base64: map[int][]string{
			1: []string{
				"wdn1D4aCWhojAuwkScFxlg==", // H
				"4WcXl8UuFfdjOAtF6EHsMg==", // e
				"LblejhqSZ7ehGIVWsgE7Mw==", // l
				"LblejhqSZ7ehGIVWsgE7Mw==", // l
				"2VZ5dSE0otnrYdvXuRxLzA==", // o
				"wMtfD88jmrPZwfzTH/8e/A==", // ,
				"chXunH2dwinSkhpA6JnsXw==", // <space>
				"YenAbqmoWlCIpJnfZFjSdg==", // W
				"2VZ5dSE0otnrYdvXuRxLzA==", // o
				"S0OwruNWJM2VuRAYmz3CMQ==", // r
				"LblejhqSZ7ehGIVWsgE7Mw==", // l
				"gnfgkQ11AZW0SHl2FuCRrQ==", // d
				"kDPg4wXyR8DDyA0MeEjIsw==", // !
			},
			2: []string{
				"pkz1gjJiaG4aKLIkW+NM4A==", // He
				"W1TAoEXxeby7vJq8uLXNTA==", // ll
				"GltmFYtmv+Zne5IgCHx3UQ==", // o,
				"T37EtUDZNzulxoQRQYw6QA==", // <space>W
				"6BxOTyt7k7SB4TqFU8KuGw==", // or
				"lGSQrQ/cF7O4mXYKRFEo8A==", // ld
				"kDPg4wXyR8DDyA0MeEjIsw==", // !
			},
			3: []string{
				"a25mekDoFsTae7SrZMu4Kw==", // Hel
				"fBlfgK8v0LaCbnYrPOqXfw==", // lo,
				"ZypUyRxdqei9Pw251rl/nA==", // <space>Wo
				"6QyOHts5txPQZ1g3pE1A1w==", // rld
				"kDPg4wXyR8DDyA0MeEjIsw==", // !
			},
			4: []string{
				"GCTo4DB8v90Zk1EasEAHXA==", // Hell
				"uyXL4codtzb9cIZl+xp3SQ==", // o,<space>W
				"xcGzkavQwFQSiRNYD3Xoiw==", // orld
				"kDPg4wXyR8DDyA0MeEjIsw==", // !
			},
			5: []string{
				"ixqZU8RhEpaoJ6v4xHgE1w==", // Hello
				"1WKQlDtwfj7PA28YJvYbAQ==", // ,<space>Wor
				"Ol7EFv4uWbVtCZ0pU9VK1g==", // ld!
			},
			6: []string{
				"cP68QZhA/6s8kcgekTTjdQ==", // Hello,
				"VA4kMJkER7p+nENXizCVWw==", // <space>World
				"kDPg4wXyR8DDyA0MeEjIsw==", // !
			},
			7: []string{
				"yEyruuvumpYxyL4jSsZMJg==", // Hello,<space>
				"5QlGXvUTFUmI4IjWrTwhvw==", // World!
			},
			8: []string{
				"VdWoloPml6g4aHZb8UlPyQ==", // Hello,<space>W
				"3zItoMw76KYRAIu8R30lZA==", // orld!
			},
			9: []string{
				"zqgxtmbLNMf+XsQfrbDflQ==", // Hello,<space>Wo
				"OaH5sxa49OrkllYLDRg5KQ==", // rld!
			},
			10: []string{
				"jGgpeQvgbAhpuAVhK4KIlA==", // Hello,<space>Wor
				"Ol7EFv4uWbVtCZ0pU9VK1g==", // ld!
			},
			11: []string{
				"SmiK9ofKdlnaInyYE4iQyQ==", // Hello,<space>Worl
				"hmpXFn1K2MwBxvLKy7KHFQ==", // d!
			},
			12: []string{
				"grtBN0au5C+J3qK1lhT57w==", // Hello,<space>World
				"kDPg4wXyR8DDyA0MeEjIsw==", // !
			},
			13: []string{
				"ZajifYh5KDgxtmS9i38K1A==", // Hello,<space>World!
			},
		},
	},
	{
		Name: "ChecksumAlgorithmCRC32",
		ID:   ChecksumAlgorithmCRC32,
		Data: "Hello, World!",
		Base64: map[int][]string{
			1: []string{
				"qgUmLw==", // H
				"79p6Wg==", // e
				"lgbC/g==", // l
				"lgbC/g==", // l
				"Dw+TRA==", // o
				"4NqDbg==", // ,
				"6WzPRQ==", // <space>
				"Jw0r2g==", // W
				"Dw+TRA==", // o
				"bAn/nQ==", // r
				"lgbC/g==", // l
				"mN1KzA==", // d
				"nmv/0w==", // !
			},
			2: []string{
				"RKFCJQ==", // He
				"zJUbJw==", // ll
				"kWQJdA==", // o,
				"IVLyCg==", // <space>W
				"Hbd1hw==", // or
				"wk6TFQ==", // ld
				"nmv/0w==", // !
			},
			3: []string{
				"3Ua3+w==", // Hel
				"bjHw3Q==", // lo,
				"7/soqA==", // <space>Wo
				"K6Pkxg==", // rld
				"nmv/0w==", // !
			},
			4: []string{
				"vLSv3Q==", // Hell
				"E91nOA==", // o,<space>W
				"luMFnQ==", // orld
				"nmv/0w==", // !
			},
			5: []string{
				"99GJgg==", // Hello
				"V7zFaw==", // ,<space>Wor
				"83RVqw==", // ld!
			},
			6: []string{
				"45uw6w==", // Hello,
				"i/ptzw==", // <space>World
				"nmv/0w==", // !
			},
			7: []string{
				"3ldvBQ==", // Hello,<space>
				"diid3g==", // World!
			},
			8: []string{
				"V7mIOg==", // Hello,<space>W
				"EEPzLw==", // orld!
			},
			9: []string{
				"yVTzfg==", // Hello,<space>Wo
				"7Ec7sg==", // rld!
			},
			10: []string{
				"2333VQ==", // Hello,<space>Wor
				"83RVqw==", // ld!
			},
			11: []string{
				"jdwacg==", // Hello,<space>Worl
				"DCGsAg==", // d!
			},
			12: []string{
				"JluGxg==", // Hello,<space>World
				"nmv/0w==", // !
			},
			13: []string{
				"7ErD0A==", // Hello,<space>World!
			},
		},
	},
	{
		Name: "ChecksumAlgorithmCRC32C",
		ID:   ChecksumAlgorithmCRC32C,
		Data: "Hello, World!",
		Base64: map[int][]string{
			1: []string{
				"md8WIg==", // H
				"BkrULw==", // e
				"fvgP4w==", // l
				"fvgP4w==", // l
				"baj8Fw==", // o
				"P4MSXw==", // ,
				"csDdjw==", // <space>
				"15LtaQ==", // W
				"baj8Fw==", // o
				"wt53qw==", // r
				"fvgP4w==", // l
				"9CFXLA==", // d
				"gKtejA==", // !
			},
			2: []string{
				"x1X1EA==", // He
				"juasAg==", // ll
				"+3oZJw==", // o,
				"CwUq6A==", // <space>W
				"Bid80w==", // or
				"BD/0zQ==", // ld
				"gKtejA==", // !
			},
			3: []string{
				"bmGdeQ==", // Hel
				"6tEsnQ==", // lo,
				"BEoJ6A==", // <space>Wo
				"jNZ0Lw==", // rld
				"gKtejA==", // !
			},
			4: []string{
				"d7zhvw==", // Hell
				"Zg/ndg==", // o,<space>W
				"NxIM0g==", // orld
				"gKtejA==", // !
			},
			5: []string{
				"gdkOGw==", // Hello
				"mKzw8w==", // ,<space>Wor
				"/AoLbw==", // ld!
			},
			6: []string{
				"ttWnBQ==", // Hello,
				"va4oKw==", // <space>World
				"gKtejA==", // !
			},
			7: []string{
				"R4ccNA==", // Hello,<space>
				"6G1AGw==", // World!
			},
			8: []string{
				"IKy02w==", // Hello,<space>W
				"snTd3A==", // orld!
			},
			9: []string{
				"J9IaMw==", // Hello,<space>Wo
				"/ok6Ag==", // rld!
			},
			10: []string{
				"4Uof9A==", // Hello,<space>Wor
				"/AoLbw==", // ld!
			},
			11: []string{
				"Su29lg==", // Hello,<space>Worl
				"7aE+1Q==", // d!
			},
			12: []string{
				"QGKhbg==", // Hello,<space>World
				"gKtejA==", // !
			},
			13: []string{
				"TVUQaA==", // Hello,<space>World!
			},
		},
	},
	{
		Name: "ChecksumAlgorithmSHA1",
		ID:   ChecksumAlgorithmSHA1,
		Data: "Hello, World!",
		Base64: map[int][]string{
			1: []string{
				"fPGE9MZ61YKD7LGTSXILDK51aCk=", // H
				"WOazpBSh4JDfxgKa3Q81Vcy6En8=", // e
				"B8NCvm5WDn9DhC4uIbd05h2F8Ec=", // l
				"B8NCvm5WDn9DhC4uIbd05h2F8Ec=", // l
				"eoGvPlkaxxP4HqHv6T3PNhV9g3Y=", // o
				"XBC1ss1nOgYW1SmqUjSxLucVOAg=", // ,
				"uFjLKCYX+wlW2WAhXI6E0cz5CcY=", // <space>
				"4kFct/Y98MneIzYjJq08N6mt/JY=", // W
				"eoGvPlkaxxP4HqHv6T3PNhV9g3Y=", // o
				"TcfJ7ENO0GUCdnE2eJdj7BHSxLc=", // r
				"B8NCvm5WDn9DhC4uIbd05h2F8Ec=", // l
				"PDY4Ns9OFmZmaaJdooChhlwtKHQ=", // d
				"Crgxisr25njdAuK1w0PtQREbOT0=", // !
			},
			2: []string{
				"U6QXeWx3eFEAOz8kMeju9WJewVs=", // He
				"EQyKMMFgcL8oE0gNlJKhoXCn2Ao=", // ll
				"RTffRwtTEYounb7Jv3KlH2bjTzc=", // o,
				"v+AA3GokklKDIZXWcEodsbAVtNc=", // <space>W
				"F1g1bbIXWffFoNqbTdHbj9b+qz8=", // or
				"KTRSa3iKQZwVw1HIRip6fu9GM/s=", // ld
				"Crgxisr25njdAuK1w0PtQREbOT0=", // !
			},
			3: []string{
				"28LR/tDcN6cK6g83aVjIAu3cBVk=", // Hel
				"Vjsv8wajWtVTlkuVBGcQzsZGFp8=", // lo,
				"TiD/yKlXPHe73JJ9rmu5yrGQbvU=", // <space>Wo
				"xGazoz5vbcFwQ400/N33hg02WPs=", // rld
				"Crgxisr25njdAuK1w0PtQREbOT0=", // !
			},
			4: []string{
				"7RD+ET3hwL2qqvCbiM00HqD0RCg=", // Hell
				"DegtaErbPwi4CiTmkZQne8G9Osk=", // o,<space>W
				"xRYQUzWDBdRSPqdVpGIp7eTchFo=", // orld
				"Crgxisr25njdAuK1w0PtQREbOT0=", // !
			},
			5: []string{
				"9/+ei3uy4Jtwk1pdeF4MxdnQq/A=", // Hello
				"EhNhst9jmY1d/Uf9hVr00qHT174=", // ,<space>Wor
				"wg0WiAK7rhyE+QubBJXg2RjaOuo=", // ld!
			},
			6: []string{
				"ZWEelSDnaBRdraodEH/dUgfmMFc=", // Hello,
				"S/q2F2cNpIbxjaqyg7yoYSFIQCM=", // <space>World
				"Crgxisr25njdAuK1w0PtQREbOT0=", // !
			},
			7: []string{
				"9Sq1f6Ud+nFFBSlEREY65aAJrjQ=", // Hello,<space>
				"nXgZWK0WNkflxeck1TTV2dt7gA0=", // World!
			},
			8: []string{
				"OFjykrj50CnUZY/NBAHDZRmHP1U=", // Hello,<space>W
				"Lnvpl2uSKgQNl17nBS7NYInLWvQ=", // orld!
			},
			9: []string{
				"bbnVxY6a94TVeLdLtZ1c39Sv6WE=", // Hello,<space>Wo
				"0lIytDHhWb1WueCKEzGkYDXIkaU=", // rld!
			},
			10: []string{
				"dI9xI1kUgBxB6dlNHzd6gLUaztg=", // Hello,<space>Wor
				"wg0WiAK7rhyE+QubBJXg2RjaOuo=", // ld!
			},
			11: []string{
				"YHVaC90hdhz6uRz4RVt7GRWQWRg=", // Hello,<space>Worl
				"7wKV80B2y1koGDVT5JOtisyNYJ4=", // d!
			},
			12: []string{
				"kH0U+zrysNTxjC1Gq+iu3OFzZ70=", // Hello,<space>World
				"Crgxisr25njdAuK1w0PtQREbOT0=", // !
			},
			13: []string{
				"CgqfKmdylCVXq1NV12r0Qvj2XgE=", // Hello,<space>World!
			},
		},
	},
	{
		Name: "ChecksumAlgorithmSHA256",
		ID:   ChecksumAlgorithmSHA256,
		Data: "Hello, World!",
		Base64: map[int][]string{
			1: []string{
				"RL165g9Hj64QYeEadzn0uU0dr5F5gtM7b8igGmP4nCE=", // H
				"P3m7e0NbBTIWUdrv03TNxoHcBvqmXjdOODN7iMoEbeo=", // e
				"rKyGwOYJypBvYysOLazMsrd9IrBiHyDr7OGkg1uT9vA=", // l
				"rKyGwOYJypBvYysOLazMsrd9IrBiHyDr7OGkg1uT9vA=", // l
				"ZcdMFaaGGHu2u/mVj0lPxrgAaANKZZqa1EmRsIxY8tI=", // o
				"0DUCxD10owuTZ0CpUX3E6isq1xaMqgp3TO/nk84LM+c=", // ,
				"Nqnn8clbgv+5l0PgxcTOldg8mkMKrFn4TvPL+rYUUGg=", // <space>
				"/LX0Dfm+a65mwdd6bBWWiGap5svXMUykMrAZ0XOS9vQ=", // W
				"ZcdMFaaGGHu2u/mVj0lPxrgAaANKZZqa1EmRsIxY8tI=", // o
				"RUNJ5CLwUpcZHq0T4h09tSDlq+9SBV5JZLgvshP1k6E=", // r
				"rKyGwOYJypBvYysOLazMsrd9IrBiHyDr7OGkg1uT9vA=", // l
				"GKw+c0PwFokMUQ6T+TUmEWnZ4/VlQ2Qpgw+vCTT0+OQ=", // d
				"u3IIvJtdfATxI2qCoAk6XjP0BCPVuo1CZvcJLDukO2I=", // !
			},
			2: []string{
				"MO/ftS/2f4Dat8uJ3P4O7IQSlmz+WDJJk2dLRhbWvRE=", // He
				"+eASOWvmXbAivRHekwiptA4E5JLMTuhjbAn7g99Kons=", // ll
				"fsQKzcFoyBcurTjt9BTuAo18syRZKp3/R9wlsr+3AOM=", // o,
				"eyMQ09/RzTFffNK8tWl6oz4zm6g80Eek/BfOT/e7IZQ=", // <space>W
				"cXVRejcLXNLmZOP9KcTqnbXOFwWOuXcv4JClSF5J2tY=", // or
				"5aCP/T11CcZueWQu29zY7YiSaacWTHGK/KVBMEGIQj0=", // ld
				"u3IIvJtdfATxI2qCoAk6XjP0BCPVuo1CZvcJLDukO2I=", // !
			},
			3: []string{
				"t4nCTc22jEQ3sEwYa/I5pyB+dXP7GyKnSf4ae42W0pI=", // Hel
				"gfJxrXTFA9WFYlteXLHZTQ5xBnVuneQV3s/cp18YYDw=", // lo,
				"MhAwO19B2SDJyEQ9H3gnTpeaWDkC+v9Dio2g7zf6I2E=", // <space>Wo
				"hcdtyuIpnSI1x5P+NCW9iDdvXEchz93ByanEUsIMXTM=", // rld
				"u3IIvJtdfATxI2qCoAk6XjP0BCPVuo1CZvcJLDukO2I=", // !
			},
			4: []string{
				"jVhvi2DfGtdQK1L8UNLgttDZtWQ4dcBU2CHf2OZnK+0=", // Hell
				"FX7abiDwvXtziI2Wie3I2SFTIX0ydw0Gi6j0mssQq6U=", // o,<space>W
				"rTQpclybP1Cx6z3unSJZDY5BoTs7PQ1JMabYCm6ihvM=", // orld
				"u3IIvJtdfATxI2qCoAk6XjP0BCPVuo1CZvcJLDukO2I=", // !
			},
			5: []string{
				"GF+NsyJx/iX1Yab8k4suJkMG7DBO2lGAB9F2SCY4GWk=", // Hello
				"VUlMJiNxwF1FFY9HMDll0dNu6Eew4VhHvdajB3M68tc=", // ,<space>Wor
				"1FODimufai/gXHbjI0Q8v5SeMNuusoRWJgxyrc9pSr8=", // ld!
			},
			6: []string{
				"2v52lEYPTje3CPUTTy9/dZy5l/nLYS1spWbdbmo0NT8=", // Hello,
				"P3N8voKv4bAoQsCyXhVzl7+hzCnwtOyn6sSwvC6up88=", // <space>World
				"u3IIvJtdfATxI2qCoAk6XjP0BCPVuo1CZvcJLDukO2I=", // !
			},
			7: []string{
				"I0Kb2bqY3VFAMJu5sAlLOq1kJDD/9vs8ph8AjOZE80o=", // Hello,<space>
				"UUtrt8hG7PuNLSnvC1x5tj5q6DjxI9qTb+gn/aZUJ2w=", // World!
			},
			8: []string{
				"3qdz7tx0h8ocak2dt/NqgtQRMQfuU86+m4Nfgxl5HLs=", // Hello,<space>W
				"ptrhGVKpqmQiKCipULxkajGp3sycV6C8hVSgatWwNKU=", // orld!
			},
			9: []string{
				"hOJsIKSetxMSI1XFD38V+aehQE2RiA7KN7zkbQXXTP8=", // Hello,<space>Wo
				"pOBtcZw/3zHUtjUeF2x5GvFqgGC/LP6eTXruUFbIvgM=", // rld!
			},
			10: []string{
				"MF82swlNzvNa6ljgk3Jsc1pvLIIh9IKxuDr6I5l48Pc=", // Hello,<space>Wor
				"1FODimufai/gXHbjI0Q8v5SeMNuusoRWJgxyrc9pSr8=", // ld!
			},
			11: []string{
				"GZSuPX2yKlmdGKaD1JHK7H5UxewqlNU74wTDPO/wXNQ=", // Hello,<space>Worl
				"JhVznUHbMRqXjDIy9RictRcvE93IYnEtTXUP9GO5y4o=", // d!
			},
			12: []string{
				"A2daxT/5zRU1zMffzfosRYxSGDcfQY3BNvLRmsH76KU=", // Hello,<space>World
				"u3IIvJtdfATxI2qCoAk6XjP0BCPVuo1CZvcJLDukO2I=", // !
			},
			13: []string{
				"3/1gIbsr1bCvZ2KQgJ7DpTGR3YHH9wpLKGiKNiGCmG8=", // Hello,<space>World!
			},
		},
	},
}
